function Qe = quantumEfficiency(Lam, Amplitude, Center, Sigma, Gamma, L0, L1, L2, L3, L4, L5, L6, L7, L8)
    % Calculate quantum efficiency using SkewedGaussian Ã— Legendre model
    %
    % Input:
    %   Lam (double array): Wavelength array in nm
    %   Amplitude (double): SkewedGaussian amplitude
    %   Center (double): SkewedGaussian center wavelength in nm
    %   Sigma (double): SkewedGaussian width parameter
    %   Gamma (double): SkewedGaussian skewness parameter
    %   L0-L8 (double): Legendre polynomial coefficients
    %
    % Output:
    %   Qe (double array): Quantum efficiency values (0-1)
    
    arguments
        Lam = transmission.utils.makeWavelengthArray()
        Amplitude = 328.19
        Center = 570.97
        Sigma = 139.77
        Gamma = -0.1517
        Degr = 8
        Li = [-0.30 0.34 -1.89 -0.82 -3.73 -0.669 -2.06 -0.24 -0.60]
    end
    
    % Calculate wavelength range for Legendre normalization
    Min_wvl = min(Lam);
    Max_wvl = max(Lam);
    
    % Calculate individual components
    %Sg_component = skewedGaussianModel(Lam, Amplitude, Center, Sigma, Gamma);
    %Legendre_component = legendreModel(Lam, Li, Min_wvl, Max_wvl);
     Sg_component = transmission.utils.skewedGaussianModel();
     Legendre_component = transmission.utils.legendreModel();
     
    % Combined quantum efficiency
    Qe = Sg_component .* Legendre_component;
    
    % Normalize to ensure values are between 0 and 1
    Qe = max(0, min(1, Qe));
end